{"/home/travis/build/npmtest/node-npmtest-gcode/test.js":"/* istanbul instrument in package npmtest_gcode */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gcode/lib.npmtest_gcode.js":"/* istanbul instrument in package npmtest_gcode */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gcode = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gcode = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gcode/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gcode && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gcode */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gcode\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gcode.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gcode.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gcode.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gcode.__dirname + '/lib.npmtest_gcode.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gcode/node_modules/gcode/index.js":"gcode = require('./gcode')\n\nmodule.exports = {\n    'parseFile' : gcode.parseFile,\n    'parseString' : gcode.parseString,\n    'parseStream' : gcode.parseStream,\n    'Interpreter' : gcode.Interpreter\n}\n","/home/travis/build/npmtest/node-npmtest-gcode/node_modules/gcode/gcode.js":"var stream = require('stream');\nvar util = require('util');\nvar parser = require('./parser');\nvar fs = require('fs');\nvar byline = require('byline');\n\n// Strips spaces out of all incoming g-code except for comments\nfunction GCodeScrubber() {\n\tthis.in_comment = false;\n\tstream.Transform.call(this);\n}\nutil.inherits(GCodeScrubber, stream.Transform);\n\nGCodeScrubber.prototype._transform = function(s, enc, done) {\n\ttry {\n\t\tfor(var result = [], i=0, j=0; i<s.length; i++) {\n\t\t\tvar c = String.fromCharCode(s[i]);\n\t\t\tvar keep_result = true;\n\t\t\tswitch(c) {\n\t\t\t\tcase ' ':\n\t\t\t\tcase '\\t':\n\t\t\t\t\tkeep_result = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '(':\n\t\t\t\t\tif(this.in_comment) {\n\t\t\t\t\t\t// ERROR\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.in_comment = true;\n\t\t\t\t\t\tkeep_result=false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase ')':\n\t\t\t\t\tif(this.in_comment) {\n\t\t\t\t\t\tthis.in_comment = false;\n\t\t\t\t\t\tkeep_result=false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// ERROR\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tif(this.in_comment) { keep_result = false;}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(keep_result) {\n\t\t\t\tresult[j++] = c;\n\t\t\t}\n\t\t}\n\t\tvar output = result.join('');\n\t\tthis.push(output);\n\t\tdone();\n\t} catch(e) {\n\t\tconsole.log(e);\n\t\tdone();\n\t}\n}\n\nfunction GCodeParser(options) {\n\tif (!options) options = {};\n\toptions.objectMode = true;\n\tstream.Transform.call(this, options);\n}\nutil.inherits(GCodeParser, stream.Transform);\n\nGCodeParser.prototype._transform = function (object, encoding, done) {\n\tif(encoding === 'buffer') {\n\t\tobject = object.toString('utf8')\n\t}\n\tthis.push(parser.parse(object));\n\tdone();\n};\n\nvar Interpreter = function(options) {}\n\nInterpreter.prototype._exec = function(cmd, args) {\n\tif((cmd in this) && (typeof this[cmd] == 'function')) {\n\t\tf = this[cmd].bind(this);\n\t\treturn f(args);\n\t} else {\n\t\treturn this._(cmd, args);\n\t}\n}\n\nInterpreter.prototype._ = function(cmd, args) {\n\treturn;\n}\n\nInterpreter.prototype._handle_line = function(line) {\n\tvar words = {}\n\tline.words.forEach(function(word) {\n\t\tvar letter = word[0];\n\t\tvar arg = word[1];\n\t\tswitch(letter) {\n\t\t\tcase 'G':\n\t\t\tcase 'M':\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\twords[letter] = arg;\n\t\t\t\tbreak;\n\t\t}\n\t}.bind(this));\n\n\tline.words.forEach(function(word) {\n\t\tvar letter = word[0];\n\t\tvar arg = word[1];\n\t\tswitch(letter) {\n\t\t\tcase 'G':\n\t\t\tcase 'M':\n\t\t\t\tfunc = (letter + arg).replace('.','_').trim();\n\t\t\t\tthis._exec(func, words)\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}.bind(this));\n}\n\nInterpreter.prototype.interpretStream = function(st, callback) {\n\tst.pipe(new GCodeScrubber())\n\t.pipe(byline())\n\t.pipe(new GCodeParser())\n\t.on('data', function(line) {\n\t\tthis._handle_line(line);\n\t}.bind(this))\n    .on('end', function() {\n\t\tif(callback && typeof callback === 'function') {\n            callback.bind(this)(null);\n        }\n    }.bind(this));\n}\n\nInterpreter.prototype.interpretFile = function(file, callback) {\n\tthis.interpretStream(fs.createReadStream(file), callback);\n}\n\nInterpreter.prototype.interpretString = function(s, callback) {\n\tvar st = new stream.Readable();\n\tst._read = function noop() {}; // redundant? see update below\n\tst.push(s);\n\tst.push(null);\n\treturn this.interpretStream(st, callback);\n}\n\nvar parseStream = function(st, callback) {\n\tvar results = [];\n\tst.pipe(new GCodeScrubber())\n\t.pipe(byline())\n\t.pipe(new GCodeParser())\n\t.on('data', function(line) {\n\t\tresults.push(line);\n\t})\n\t.on('end', function() {\n\t\ttypeof callback === 'function' && callback(null, results);\n\t});\n}\n\nvar parseFile = function(file, callback) {\n\treturn parseStream(fs.createReadStream(file), callback)\n}\n\nvar parseString = function(s, callback) {\n\tvar st = new stream.Readable();\n\tst._read = function noop() {}; // redundant? see update below\n\tst.push(s);\n\tst.push(null);\n\treturn parseStream(st, callback)\n}\n\nmodule.exports.parseStream = parseStream;\nmodule.exports.parseString = parseString;\nmodule.exports.parseFile = parseFile;\nmodule.exports.Interpreter = Interpreter;\n","/home/travis/build/npmtest/node-npmtest-gcode/node_modules/gcode/parser.js":"module.exports = (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { start: peg$parsestart },\n        peg$startRuleFunction  = peg$parsestart,\n\n        peg$c0 = peg$FAILED,\n        peg$c1 = null,\n        peg$c2 = [],\n        peg$c3 = function(num, words) {\n              return {'N':num, 'words':words}\n        },\n        peg$c4 = function(word, value) { return [word, value]; },\n        peg$c5 = \"N\",\n        peg$c6 = { type: \"literal\", value: \"N\", description: \"\\\"N\\\"\" },\n        peg$c7 = /^[0-9]/,\n        peg$c8 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c9 = function() { return parseInt(text()); },\n        peg$c10 = /^[+\\-]/,\n        peg$c11 = { type: \"class\", value: \"[+\\\\-]\", description: \"[+\\\\-]\" },\n        peg$c12 = /^[.]/,\n        peg$c13 = { type: \"class\", value: \"[.]\", description: \"[.]\" },\n        peg$c14 = function() { return parseFloat(text()); },\n        peg$c15 = \"[\",\n        peg$c16 = { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\n        peg$c17 = \"]\",\n        peg$c18 = { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\n        peg$c19 = function(expr) {return expr; },\n        peg$c20 = \"ATAN\",\n        peg$c21 = { type: \"literal\", value: \"ATAN\", description: \"\\\"ATAN\\\"\" },\n        peg$c22 = \"/\",\n        peg$c23 = { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n        peg$c24 = function(left, right) { \n            return {'op':\"ATAN\", 'left':left, 'right':right};\n        },\n        peg$c25 = function(op, expr) {return {'op':op, 'right':expr}},\n        peg$c26 = \"#\",\n        peg$c27 = { type: \"literal\", value: \"#\", description: \"\\\"#\\\"\" },\n        peg$c28 = function(expr) { return {'op':'#', 'right':expr }},\n        peg$c29 = function(first, rest) { \n                return buildTree(first, rest);\n            },\n        peg$c30 = function(first, rest) {\n              return buildTree(first, rest);\n            },\n        peg$c31 = \"**\",\n        peg$c32 = { type: \"literal\", value: \"**\", description: \"\\\"**\\\"\" },\n        peg$c33 = \"*\",\n        peg$c34 = { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n        peg$c35 = \"MOD\",\n        peg$c36 = { type: \"literal\", value: \"MOD\", description: \"\\\"MOD\\\"\" },\n        peg$c37 = \"+\",\n        peg$c38 = { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n        peg$c39 = \"-\",\n        peg$c40 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n        peg$c41 = \"OR\",\n        peg$c42 = { type: \"literal\", value: \"OR\", description: \"\\\"OR\\\"\" },\n        peg$c43 = \"XOR\",\n        peg$c44 = { type: \"literal\", value: \"XOR\", description: \"\\\"XOR\\\"\" },\n        peg$c45 = \"AND\",\n        peg$c46 = { type: \"literal\", value: \"AND\", description: \"\\\"AND\\\"\" },\n        peg$c47 = \"ABS\",\n        peg$c48 = { type: \"literal\", value: \"ABS\", description: \"\\\"ABS\\\"\" },\n        peg$c49 = \"ACOS\",\n        peg$c50 = { type: \"literal\", value: \"ACOS\", description: \"\\\"ACOS\\\"\" },\n        peg$c51 = \"ASIN\",\n        peg$c52 = { type: \"literal\", value: \"ASIN\", description: \"\\\"ASIN\\\"\" },\n        peg$c53 = \"COS\",\n        peg$c54 = { type: \"literal\", value: \"COS\", description: \"\\\"COS\\\"\" },\n        peg$c55 = \"EXP\",\n        peg$c56 = { type: \"literal\", value: \"EXP\", description: \"\\\"EXP\\\"\" },\n        peg$c57 = \"FIX\",\n        peg$c58 = { type: \"literal\", value: \"FIX\", description: \"\\\"FIX\\\"\" },\n        peg$c59 = \"FUP\",\n        peg$c60 = { type: \"literal\", value: \"FUP\", description: \"\\\"FUP\\\"\" },\n        peg$c61 = \"ROUND\",\n        peg$c62 = { type: \"literal\", value: \"ROUND\", description: \"\\\"ROUND\\\"\" },\n        peg$c63 = \"LN\",\n        peg$c64 = { type: \"literal\", value: \"LN\", description: \"\\\"LN\\\"\" },\n        peg$c65 = \"SIN\",\n        peg$c66 = { type: \"literal\", value: \"SIN\", description: \"\\\"SIN\\\"\" },\n        peg$c67 = \"SQRT\",\n        peg$c68 = { type: \"literal\", value: \"SQRT\", description: \"\\\"SQRT\\\"\" },\n        peg$c69 = \"TAN\",\n        peg$c70 = { type: \"literal\", value: \"TAN\", description: \"\\\"TAN\\\"\" },\n        peg$c71 = \"EXISTS\",\n        peg$c72 = { type: \"literal\", value: \"EXISTS\", description: \"\\\"EXISTS\\\"\" },\n        peg$c73 = \"A\",\n        peg$c74 = { type: \"literal\", value: \"A\", description: \"\\\"A\\\"\" },\n        peg$c75 = \"B\",\n        peg$c76 = { type: \"literal\", value: \"B\", description: \"\\\"B\\\"\" },\n        peg$c77 = \"C\",\n        peg$c78 = { type: \"literal\", value: \"C\", description: \"\\\"C\\\"\" },\n        peg$c79 = \"D\",\n        peg$c80 = { type: \"literal\", value: \"D\", description: \"\\\"D\\\"\" },\n        peg$c81 = \"F\",\n        peg$c82 = { type: \"literal\", value: \"F\", description: \"\\\"F\\\"\" },\n        peg$c83 = \"G\",\n        peg$c84 = { type: \"literal\", value: \"G\", description: \"\\\"G\\\"\" },\n        peg$c85 = \"H\",\n        peg$c86 = { type: \"literal\", value: \"H\", description: \"\\\"H\\\"\" },\n        peg$c87 = \"I\",\n        peg$c88 = { type: \"literal\", value: \"I\", description: \"\\\"I\\\"\" },\n        peg$c89 = \"J\",\n        peg$c90 = { type: \"literal\", value: \"J\", description: \"\\\"J\\\"\" },\n        peg$c91 = \"K\",\n        peg$c92 = { type: \"literal\", value: \"K\", description: \"\\\"K\\\"\" },\n        peg$c93 = \"L\",\n        peg$c94 = { type: \"literal\", value: \"L\", description: \"\\\"L\\\"\" },\n        peg$c95 = \"M\",\n        peg$c96 = { type: \"literal\", value: \"M\", description: \"\\\"M\\\"\" },\n        peg$c97 = \"P\",\n        peg$c98 = { type: \"literal\", value: \"P\", description: \"\\\"P\\\"\" },\n        peg$c99 = \"Q\",\n        peg$c100 = { type: \"literal\", value: \"Q\", description: \"\\\"Q\\\"\" },\n        peg$c101 = \"R\",\n        peg$c102 = { type: \"literal\", value: \"R\", description: \"\\\"R\\\"\" },\n        peg$c103 = \"S\",\n        peg$c104 = { type: \"literal\", value: \"S\", description: \"\\\"S\\\"\" },\n        peg$c105 = \"T\",\n        peg$c106 = { type: \"literal\", value: \"T\", description: \"\\\"T\\\"\" },\n        peg$c107 = \"X\",\n        peg$c108 = { type: \"literal\", value: \"X\", description: \"\\\"X\\\"\" },\n        peg$c109 = \"Y\",\n        peg$c110 = { type: \"literal\", value: \"Y\", description: \"\\\"Y\\\"\" },\n        peg$c111 = \"Z\",\n        peg$c112 = { type: \"literal\", value: \"Z\", description: \"\\\"Z\\\"\" },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parsestart() {\n      var s0;\n\n      s0 = peg$parseline();\n\n      return s0;\n    }\n\n    function peg$parseline() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parseline_number();\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseword();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseword();\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c3(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseword() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseletter();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefactor1();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c4(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseline_number() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 78) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseinteger();\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseinteger() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c7.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c7.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n        }\n      } else {\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c9();\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (peg$c10.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c11); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c7.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c8); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c7.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c8); }\n            }\n          }\n        } else {\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (peg$c12.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c13); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c7.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c8); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c7.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c8); }\n                }\n              }\n            } else {\n              s5 = peg$c0;\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c14();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseexpression() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c15;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c16); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefactor4();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s3 = peg$c17;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c18); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c19(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseatan_factor() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c20) {\n        s1 = peg$c20;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c21); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseexpression();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 47) {\n            s3 = peg$c22;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c23); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseexpression();\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c24(s2, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseunary_factor() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseunary_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseexpression();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c25(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseparam_value() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 35) {\n        s1 = peg$c26;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c27); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseexpression();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsenumber();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseparam_value();\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c28(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsefactor1() {\n      var s0;\n\n      s0 = peg$parseexpression();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsenumber();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseatan_factor();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseunary_factor();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseparam_value();\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsefactor2() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parsefactor1();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parsegroup1_op();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsefactor1();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parsegroup1_op();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefactor1();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c29(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsefactor3() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parsefactor2();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parsegroup2_op();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsefactor2();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parsegroup2_op();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefactor2();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c30(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsefactor4() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parsefactor3();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parsegroup3_op();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsefactor3();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parsegroup3_op();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefactor3();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c30(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsegroup1_op() {\n      var s0;\n\n      if (input.substr(peg$currPos, 2) === peg$c31) {\n        s0 = peg$c31;\n        peg$currPos += 2;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c32); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsegroup2_op() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 42) {\n        s0 = peg$c33;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 47) {\n          s0 = peg$c22;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3) === peg$c35) {\n            s0 = peg$c35;\n            peg$currPos += 3;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c36); }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsegroup3_op() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 43) {\n        s0 = peg$c37;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c38); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s0 = peg$c39;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c40); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c41) {\n            s0 = peg$c41;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c42); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c43) {\n              s0 = peg$c43;\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c44); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3) === peg$c45) {\n                s0 = peg$c45;\n                peg$currPos += 3;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c46); }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseunary_op() {\n      var s0;\n\n      if (input.substr(peg$currPos, 3) === peg$c47) {\n        s0 = peg$c47;\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c48); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4) === peg$c49) {\n          s0 = peg$c49;\n          peg$currPos += 4;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c50); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4) === peg$c51) {\n            s0 = peg$c51;\n            peg$currPos += 4;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c52); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c53) {\n              s0 = peg$c53;\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c54); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3) === peg$c55) {\n                s0 = peg$c55;\n                peg$currPos += 3;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c56); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 3) === peg$c57) {\n                  s0 = peg$c57;\n                  peg$currPos += 3;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c58); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 3) === peg$c59) {\n                    s0 = peg$c59;\n                    peg$currPos += 3;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c60); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 5) === peg$c61) {\n                      s0 = peg$c61;\n                      peg$currPos += 5;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c62); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 2) === peg$c63) {\n                        s0 = peg$c63;\n                        peg$currPos += 2;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c64); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 3) === peg$c65) {\n                          s0 = peg$c65;\n                          peg$currPos += 3;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c66); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 4) === peg$c67) {\n                            s0 = peg$c67;\n                            peg$currPos += 4;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c68); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 3) === peg$c69) {\n                              s0 = peg$c69;\n                              peg$currPos += 3;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c70); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 6) === peg$c71) {\n                                s0 = peg$c71;\n                                peg$currPos += 6;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseletter() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 65) {\n        s0 = peg$c73;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c74); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 66) {\n          s0 = peg$c75;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c76); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 67) {\n            s0 = peg$c77;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c78); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 68) {\n              s0 = peg$c79;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c80); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 70) {\n                s0 = peg$c81;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c82); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 71) {\n                  s0 = peg$c83;\n                  peg$currPos++;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c84); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 72) {\n                    s0 = peg$c85;\n                    peg$currPos++;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c86); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 73) {\n                      s0 = peg$c87;\n                      peg$currPos++;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c88); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 74) {\n                        s0 = peg$c89;\n                        peg$currPos++;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c90); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 75) {\n                          s0 = peg$c91;\n                          peg$currPos++;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c92); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 76) {\n                            s0 = peg$c93;\n                            peg$currPos++;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c94); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 77) {\n                              s0 = peg$c95;\n                              peg$currPos++;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c96); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.charCodeAt(peg$currPos) === 80) {\n                                s0 = peg$c97;\n                                peg$currPos++;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c98); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 81) {\n                                  s0 = peg$c99;\n                                  peg$currPos++;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c100); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (input.charCodeAt(peg$currPos) === 82) {\n                                    s0 = peg$c101;\n                                    peg$currPos++;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c102); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    if (input.charCodeAt(peg$currPos) === 83) {\n                                      s0 = peg$c103;\n                                      peg$currPos++;\n                                    } else {\n                                      s0 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c104); }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      if (input.charCodeAt(peg$currPos) === 84) {\n                                        s0 = peg$c105;\n                                        peg$currPos++;\n                                      } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c106); }\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 88) {\n                                          s0 = peg$c107;\n                                          peg$currPos++;\n                                        } else {\n                                          s0 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c108); }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                          if (input.charCodeAt(peg$currPos) === 89) {\n                                            s0 = peg$c109;\n                                            peg$currPos++;\n                                          } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c110); }\n                                          }\n                                          if (s0 === peg$FAILED) {\n                                            if (input.charCodeAt(peg$currPos) === 90) {\n                                              s0 = peg$c111;\n                                              peg$currPos++;\n                                            } else {\n                                              s0 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c112); }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n\n       buildTree = function(first, rest) {\n          if(rest.length == 0) {\n              return first;\n          } else { \n              var next = rest.shift();\n              var operator = next[0]\n              var term = next[1]\n              return {left: first, right: buildTree(term, rest), op: operator};\n          }\n       }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();\n"}